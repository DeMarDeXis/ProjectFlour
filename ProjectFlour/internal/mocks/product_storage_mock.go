// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storage

import (
	"ProjectFlour/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockProductStorage creates a new instance of MockProductStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductStorage {
	mock := &MockProductStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductStorage is an autogenerated mock type for the ProductStorage type
type MockProductStorage struct {
	mock.Mock
}

type MockProductStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductStorage) EXPECT() *MockProductStorage_Expecter {
	return &MockProductStorage_Expecter{mock: &_m.Mock}
}

// GetAllPartners provides a mock function for the type MockProductStorage
func (_mock *MockProductStorage) GetAllPartners() (*[]model.Partners, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllPartners")
	}

	var r0 *[]model.Partners
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*[]model.Partners, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *[]model.Partners); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Partners)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductStorage_GetAllPartners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPartners'
type MockProductStorage_GetAllPartners_Call struct {
	*mock.Call
}

// GetAllPartners is a helper method to define mock.On call
func (_e *MockProductStorage_Expecter) GetAllPartners() *MockProductStorage_GetAllPartners_Call {
	return &MockProductStorage_GetAllPartners_Call{Call: _e.mock.On("GetAllPartners")}
}

func (_c *MockProductStorage_GetAllPartners_Call) Run(run func()) *MockProductStorage_GetAllPartners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProductStorage_GetAllPartners_Call) Return(partnerss *[]model.Partners, err error) *MockProductStorage_GetAllPartners_Call {
	_c.Call.Return(partnerss, err)
	return _c
}

func (_c *MockProductStorage_GetAllPartners_Call) RunAndReturn(run func() (*[]model.Partners, error)) *MockProductStorage_GetAllPartners_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProducts provides a mock function for the type MockProductStorage
func (_mock *MockProductStorage) GetAllProducts() (*[]model.Product, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 *[]model.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*[]model.Product, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *[]model.Product); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductStorage_GetAllProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProducts'
type MockProductStorage_GetAllProducts_Call struct {
	*mock.Call
}

// GetAllProducts is a helper method to define mock.On call
func (_e *MockProductStorage_Expecter) GetAllProducts() *MockProductStorage_GetAllProducts_Call {
	return &MockProductStorage_GetAllProducts_Call{Call: _e.mock.On("GetAllProducts")}
}

func (_c *MockProductStorage_GetAllProducts_Call) Run(run func()) *MockProductStorage_GetAllProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProductStorage_GetAllProducts_Call) Return(products *[]model.Product, err error) *MockProductStorage_GetAllProducts_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockProductStorage_GetAllProducts_Call) RunAndReturn(run func() (*[]model.Product, error)) *MockProductStorage_GetAllProducts_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProductsPartner provides a mock function for the type MockProductStorage
func (_mock *MockProductStorage) GetAllProductsPartner() (*[]model.ProductsPartners, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllProductsPartner")
	}

	var r0 *[]model.ProductsPartners
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*[]model.ProductsPartners, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *[]model.ProductsPartners); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.ProductsPartners)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductStorage_GetAllProductsPartner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProductsPartner'
type MockProductStorage_GetAllProductsPartner_Call struct {
	*mock.Call
}

// GetAllProductsPartner is a helper method to define mock.On call
func (_e *MockProductStorage_Expecter) GetAllProductsPartner() *MockProductStorage_GetAllProductsPartner_Call {
	return &MockProductStorage_GetAllProductsPartner_Call{Call: _e.mock.On("GetAllProductsPartner")}
}

func (_c *MockProductStorage_GetAllProductsPartner_Call) Run(run func()) *MockProductStorage_GetAllProductsPartner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProductStorage_GetAllProductsPartner_Call) Return(productsPartnerss *[]model.ProductsPartners, err error) *MockProductStorage_GetAllProductsPartner_Call {
	_c.Call.Return(productsPartnerss, err)
	return _c
}

func (_c *MockProductStorage_GetAllProductsPartner_Call) RunAndReturn(run func() (*[]model.ProductsPartners, error)) *MockProductStorage_GetAllProductsPartner_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTypeProduct provides a mock function for the type MockProductStorage
func (_mock *MockProductStorage) GetAllTypeProduct() (*[]model.TypeProduct, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTypeProduct")
	}

	var r0 *[]model.TypeProduct
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*[]model.TypeProduct, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *[]model.TypeProduct); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.TypeProduct)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductStorage_GetAllTypeProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTypeProduct'
type MockProductStorage_GetAllTypeProduct_Call struct {
	*mock.Call
}

// GetAllTypeProduct is a helper method to define mock.On call
func (_e *MockProductStorage_Expecter) GetAllTypeProduct() *MockProductStorage_GetAllTypeProduct_Call {
	return &MockProductStorage_GetAllTypeProduct_Call{Call: _e.mock.On("GetAllTypeProduct")}
}

func (_c *MockProductStorage_GetAllTypeProduct_Call) Run(run func()) *MockProductStorage_GetAllTypeProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProductStorage_GetAllTypeProduct_Call) Return(typeProducts *[]model.TypeProduct, err error) *MockProductStorage_GetAllTypeProduct_Call {
	_c.Call.Return(typeProducts, err)
	return _c
}

func (_c *MockProductStorage_GetAllTypeProduct_Call) RunAndReturn(run func() (*[]model.TypeProduct, error)) *MockProductStorage_GetAllTypeProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTypesMaterial provides a mock function for the type MockProductStorage
func (_mock *MockProductStorage) GetAllTypesMaterial() (*[]model.TypeMaterial, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTypesMaterial")
	}

	var r0 *[]model.TypeMaterial
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*[]model.TypeMaterial, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *[]model.TypeMaterial); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.TypeMaterial)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductStorage_GetAllTypesMaterial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTypesMaterial'
type MockProductStorage_GetAllTypesMaterial_Call struct {
	*mock.Call
}

// GetAllTypesMaterial is a helper method to define mock.On call
func (_e *MockProductStorage_Expecter) GetAllTypesMaterial() *MockProductStorage_GetAllTypesMaterial_Call {
	return &MockProductStorage_GetAllTypesMaterial_Call{Call: _e.mock.On("GetAllTypesMaterial")}
}

func (_c *MockProductStorage_GetAllTypesMaterial_Call) Run(run func()) *MockProductStorage_GetAllTypesMaterial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProductStorage_GetAllTypesMaterial_Call) Return(typeMaterials *[]model.TypeMaterial, err error) *MockProductStorage_GetAllTypesMaterial_Call {
	_c.Call.Return(typeMaterials, err)
	return _c
}

func (_c *MockProductStorage_GetAllTypesMaterial_Call) RunAndReturn(run func() (*[]model.TypeMaterial, error)) *MockProductStorage_GetAllTypesMaterial_Call {
	_c.Call.Return(run)
	return _c
}
