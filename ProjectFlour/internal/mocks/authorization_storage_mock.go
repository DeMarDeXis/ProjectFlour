// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storage

import (
	"ProjectFlour/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthorizationStorage creates a new instance of MockAuthorizationStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorizationStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthorizationStorage {
	mock := &MockAuthorizationStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthorizationStorage is an autogenerated mock type for the AuthorizationStorage type
type MockAuthorizationStorage struct {
	mock.Mock
}

type MockAuthorizationStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthorizationStorage) EXPECT() *MockAuthorizationStorage_Expecter {
	return &MockAuthorizationStorage_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockAuthorizationStorage
func (_mock *MockAuthorizationStorage) CreateUser(user model.User) (int, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(model.User) (int, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(model.User) int); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(model.User) error); ok {
		r1 = returnFunc(user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthorizationStorage_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockAuthorizationStorage_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user model.User
func (_e *MockAuthorizationStorage_Expecter) CreateUser(user interface{}) *MockAuthorizationStorage_CreateUser_Call {
	return &MockAuthorizationStorage_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *MockAuthorizationStorage_CreateUser_Call) Run(run func(user model.User)) *MockAuthorizationStorage_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.User
		if args[0] != nil {
			arg0 = args[0].(model.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthorizationStorage_CreateUser_Call) Return(n int, err error) *MockAuthorizationStorage_CreateUser_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockAuthorizationStorage_CreateUser_Call) RunAndReturn(run func(user model.User) (int, error)) *MockAuthorizationStorage_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockAuthorizationStorage
func (_mock *MockAuthorizationStorage) GetUser(username string, password string) (model.User, error) {
	ret := _mock.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (model.User, error)); ok {
		return returnFunc(username, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) model.User); ok {
		r0 = returnFunc(username, password)
	} else {
		r0 = ret.Get(0).(model.User)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(username, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthorizationStorage_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockAuthorizationStorage_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *MockAuthorizationStorage_Expecter) GetUser(username interface{}, password interface{}) *MockAuthorizationStorage_GetUser_Call {
	return &MockAuthorizationStorage_GetUser_Call{Call: _e.mock.On("GetUser", username, password)}
}

func (_c *MockAuthorizationStorage_GetUser_Call) Run(run func(username string, password string)) *MockAuthorizationStorage_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthorizationStorage_GetUser_Call) Return(user model.User, err error) *MockAuthorizationStorage_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockAuthorizationStorage_GetUser_Call) RunAndReturn(run func(username string, password string) (model.User, error)) *MockAuthorizationStorage_GetUser_Call {
	_c.Call.Return(run)
	return _c
}
