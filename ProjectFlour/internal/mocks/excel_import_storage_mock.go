// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storage

import (
	"ProjectFlour/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockExcelImportStorage creates a new instance of MockExcelImportStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExcelImportStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExcelImportStorage {
	mock := &MockExcelImportStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExcelImportStorage is an autogenerated mock type for the ExcelImportStorage type
type MockExcelImportStorage struct {
	mock.Mock
}

type MockExcelImportStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExcelImportStorage) EXPECT() *MockExcelImportStorage_Expecter {
	return &MockExcelImportStorage_Expecter{mock: &_m.Mock}
}

// AddPartnersFromExcel provides a mock function for the type MockExcelImportStorage
func (_mock *MockExcelImportStorage) AddPartnersFromExcel(partners []model.Partners) error {
	ret := _mock.Called(partners)

	if len(ret) == 0 {
		panic("no return value specified for AddPartnersFromExcel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]model.Partners) error); ok {
		r0 = returnFunc(partners)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExcelImportStorage_AddPartnersFromExcel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPartnersFromExcel'
type MockExcelImportStorage_AddPartnersFromExcel_Call struct {
	*mock.Call
}

// AddPartnersFromExcel is a helper method to define mock.On call
//   - partners []model.Partners
func (_e *MockExcelImportStorage_Expecter) AddPartnersFromExcel(partners interface{}) *MockExcelImportStorage_AddPartnersFromExcel_Call {
	return &MockExcelImportStorage_AddPartnersFromExcel_Call{Call: _e.mock.On("AddPartnersFromExcel", partners)}
}

func (_c *MockExcelImportStorage_AddPartnersFromExcel_Call) Run(run func(partners []model.Partners)) *MockExcelImportStorage_AddPartnersFromExcel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []model.Partners
		if args[0] != nil {
			arg0 = args[0].([]model.Partners)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockExcelImportStorage_AddPartnersFromExcel_Call) Return(err error) *MockExcelImportStorage_AddPartnersFromExcel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExcelImportStorage_AddPartnersFromExcel_Call) RunAndReturn(run func(partners []model.Partners) error) *MockExcelImportStorage_AddPartnersFromExcel_Call {
	_c.Call.Return(run)
	return _c
}

// AddProductPartnersFromExcel provides a mock function for the type MockExcelImportStorage
func (_mock *MockExcelImportStorage) AddProductPartnersFromExcel(productsPartners []model.ProductsPartners) error {
	ret := _mock.Called(productsPartners)

	if len(ret) == 0 {
		panic("no return value specified for AddProductPartnersFromExcel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]model.ProductsPartners) error); ok {
		r0 = returnFunc(productsPartners)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExcelImportStorage_AddProductPartnersFromExcel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProductPartnersFromExcel'
type MockExcelImportStorage_AddProductPartnersFromExcel_Call struct {
	*mock.Call
}

// AddProductPartnersFromExcel is a helper method to define mock.On call
//   - productsPartners []model.ProductsPartners
func (_e *MockExcelImportStorage_Expecter) AddProductPartnersFromExcel(productsPartners interface{}) *MockExcelImportStorage_AddProductPartnersFromExcel_Call {
	return &MockExcelImportStorage_AddProductPartnersFromExcel_Call{Call: _e.mock.On("AddProductPartnersFromExcel", productsPartners)}
}

func (_c *MockExcelImportStorage_AddProductPartnersFromExcel_Call) Run(run func(productsPartners []model.ProductsPartners)) *MockExcelImportStorage_AddProductPartnersFromExcel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []model.ProductsPartners
		if args[0] != nil {
			arg0 = args[0].([]model.ProductsPartners)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockExcelImportStorage_AddProductPartnersFromExcel_Call) Return(err error) *MockExcelImportStorage_AddProductPartnersFromExcel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExcelImportStorage_AddProductPartnersFromExcel_Call) RunAndReturn(run func(productsPartners []model.ProductsPartners) error) *MockExcelImportStorage_AddProductPartnersFromExcel_Call {
	_c.Call.Return(run)
	return _c
}

// AddProductsFromExcel provides a mock function for the type MockExcelImportStorage
func (_mock *MockExcelImportStorage) AddProductsFromExcel(production []model.Product) error {
	ret := _mock.Called(production)

	if len(ret) == 0 {
		panic("no return value specified for AddProductsFromExcel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]model.Product) error); ok {
		r0 = returnFunc(production)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExcelImportStorage_AddProductsFromExcel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProductsFromExcel'
type MockExcelImportStorage_AddProductsFromExcel_Call struct {
	*mock.Call
}

// AddProductsFromExcel is a helper method to define mock.On call
//   - production []model.Product
func (_e *MockExcelImportStorage_Expecter) AddProductsFromExcel(production interface{}) *MockExcelImportStorage_AddProductsFromExcel_Call {
	return &MockExcelImportStorage_AddProductsFromExcel_Call{Call: _e.mock.On("AddProductsFromExcel", production)}
}

func (_c *MockExcelImportStorage_AddProductsFromExcel_Call) Run(run func(production []model.Product)) *MockExcelImportStorage_AddProductsFromExcel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []model.Product
		if args[0] != nil {
			arg0 = args[0].([]model.Product)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockExcelImportStorage_AddProductsFromExcel_Call) Return(err error) *MockExcelImportStorage_AddProductsFromExcel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExcelImportStorage_AddProductsFromExcel_Call) RunAndReturn(run func(production []model.Product) error) *MockExcelImportStorage_AddProductsFromExcel_Call {
	_c.Call.Return(run)
	return _c
}

// AddTypeMaterialFromExcel provides a mock function for the type MockExcelImportStorage
func (_mock *MockExcelImportStorage) AddTypeMaterialFromExcel(material []model.TypeMaterial) error {
	ret := _mock.Called(material)

	if len(ret) == 0 {
		panic("no return value specified for AddTypeMaterialFromExcel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]model.TypeMaterial) error); ok {
		r0 = returnFunc(material)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExcelImportStorage_AddTypeMaterialFromExcel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTypeMaterialFromExcel'
type MockExcelImportStorage_AddTypeMaterialFromExcel_Call struct {
	*mock.Call
}

// AddTypeMaterialFromExcel is a helper method to define mock.On call
//   - material []model.TypeMaterial
func (_e *MockExcelImportStorage_Expecter) AddTypeMaterialFromExcel(material interface{}) *MockExcelImportStorage_AddTypeMaterialFromExcel_Call {
	return &MockExcelImportStorage_AddTypeMaterialFromExcel_Call{Call: _e.mock.On("AddTypeMaterialFromExcel", material)}
}

func (_c *MockExcelImportStorage_AddTypeMaterialFromExcel_Call) Run(run func(material []model.TypeMaterial)) *MockExcelImportStorage_AddTypeMaterialFromExcel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []model.TypeMaterial
		if args[0] != nil {
			arg0 = args[0].([]model.TypeMaterial)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockExcelImportStorage_AddTypeMaterialFromExcel_Call) Return(err error) *MockExcelImportStorage_AddTypeMaterialFromExcel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExcelImportStorage_AddTypeMaterialFromExcel_Call) RunAndReturn(run func(material []model.TypeMaterial) error) *MockExcelImportStorage_AddTypeMaterialFromExcel_Call {
	_c.Call.Return(run)
	return _c
}

// AddTypeProductFromExcel provides a mock function for the type MockExcelImportStorage
func (_mock *MockExcelImportStorage) AddTypeProductFromExcel(production []model.TypeProduct) error {
	ret := _mock.Called(production)

	if len(ret) == 0 {
		panic("no return value specified for AddTypeProductFromExcel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]model.TypeProduct) error); ok {
		r0 = returnFunc(production)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExcelImportStorage_AddTypeProductFromExcel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTypeProductFromExcel'
type MockExcelImportStorage_AddTypeProductFromExcel_Call struct {
	*mock.Call
}

// AddTypeProductFromExcel is a helper method to define mock.On call
//   - production []model.TypeProduct
func (_e *MockExcelImportStorage_Expecter) AddTypeProductFromExcel(production interface{}) *MockExcelImportStorage_AddTypeProductFromExcel_Call {
	return &MockExcelImportStorage_AddTypeProductFromExcel_Call{Call: _e.mock.On("AddTypeProductFromExcel", production)}
}

func (_c *MockExcelImportStorage_AddTypeProductFromExcel_Call) Run(run func(production []model.TypeProduct)) *MockExcelImportStorage_AddTypeProductFromExcel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []model.TypeProduct
		if args[0] != nil {
			arg0 = args[0].([]model.TypeProduct)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockExcelImportStorage_AddTypeProductFromExcel_Call) Return(err error) *MockExcelImportStorage_AddTypeProductFromExcel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExcelImportStorage_AddTypeProductFromExcel_Call) RunAndReturn(run func(production []model.TypeProduct) error) *MockExcelImportStorage_AddTypeProductFromExcel_Call {
	_c.Call.Return(run)
	return _c
}
